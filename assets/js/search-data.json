{
  
    
        "post0": {
            "title": "Linear Regression from Scratch",
            "content": "Import libraries . import numpy as np import random import matplotlib.pyplot as plt . Data . X = [*range(1, 51)] Y = list(map(lambda x: 2*x + 5, X)) . Univariate Regression . h(Ø) = Øx + b . MSE cost function . sum[(h(x) - y)^2] . Gradient Descent . repeat { Ø = Ø - ∆J(Ø) = Ø - LR*1/m * sum((h(Ø, b) - Y)*X) b = b - ∆J(b) = b - LR*1/m * sum((h(Ø, b) - Y)) } . def mse(y_true, y_pred): cost = 0 m = len(y_pred) for i in range(m): cost += (y_pred[i] - y_true[i]) ** 2 return cost/(2*m) def der_mse(y_true, y_pred): der_cost = 0 m = len(y_pred) for i in range(m): der_cost += (y_pred[i] - y_true[i]) return der_cost def predict(x): return w*x + b . # Intialization of variables m = len(X) LR = 0.01 w,b =0,0 epochs = 10000 # Training total_cost = [] for i in range(epochs): y_pred = [] epoch_cost = [] for num, data in enumerate(zip(X, Y)): x, y = data y_pred = [] y_pred.append(w*x + b) cost = mse(Y[num:num+1], y_pred) epoch_cost.append(cost) der_cost = der_mse(Y[num:num+1], y_pred) w -= LR * (1/m) * der_cost * x b -= LR * (1/m) * der_cost total_cost.append(np.mean(epoch_cost)) if i%100==0: print(f&#39;epoch:{i} t tcost:{cost}&#39;) . epoch:0 cost:0.025611389670237215 epoch:100 cost:0.018182195545164287 epoch:200 cost:0.012189274536294795 epoch:300 cost:0.008171643152339193 epoch:400 cost:0.0054782383980541355 epoch:500 cost:0.0036725901249513543 epoch:600 cost:0.002462090410431256 epoch:700 cost:0.0016505760193477829 epoch:800 cost:0.0011065398671380308 epoch:900 cost:0.000741820105959969 epoch:1000 cost:0.0004973133693137884 epoch:1100 cost:0.00033339698575327275 epoch:1200 cost:0.0002235080674844434 epoch:1300 cost:0.00014983895585520706 epoch:1400 cost:0.00010045146443465835 epoch:1500 cost:6.7342278578404e-05 epoch:1600 cost:4.514600667727226e-05 epoch:1700 cost:3.0265710664073232e-05 epoch:1800 cost:2.0290016978670674e-05 epoch:1900 cost:1.360234998487868e-05 epoch:2000 cost:9.118963542838417e-06 epoch:2100 cost:6.113318374170985e-06 epoch:2200 cost:4.098345318417492e-06 epoch:2300 cost:2.7475150680744847e-06 epoch:2400 cost:1.841923621007388e-06 epoch:2500 cost:1.2348185693985232e-06 epoch:2600 cost:8.278176586372273e-07 epoch:2700 cost:5.549658005751873e-07 epoch:2800 cost:3.720469557599512e-07 epoch:2900 cost:2.494188599506714e-07 epoch:3000 cost:1.6720945228161918e-07 epoch:3100 cost:1.1209657898058967e-07 epoch:3200 cost:7.514911895116066e-08 epoch:3300 cost:5.037968268110929e-08 epoch:3400 cost:3.377434708820474e-08 epoch:3500 cost:2.264219345837215e-08 epoch:3600 cost:1.517924012235436e-08 epoch:3700 cost:1.01761046747376e-08 epoch:3800 cost:6.822021757908689e-09 epoch:3900 cost:4.573457363695997e-09 epoch:4000 cost:3.0660283713697693e-09 epoch:4100 cost:2.0554537237732162e-09 epoch:4200 cost:1.3779683362497546e-09 epoch:4300 cost:9.237847163386412e-10 epoch:4400 cost:6.193017497921814e-10 epoch:4500 cost:4.1517753070348694e-10 epoch:4600 cost:2.7833343253898926e-10 epoch:4700 cost:1.865936716262578e-10 epoch:4800 cost:1.2509168552523098e-10 epoch:4900 cost:8.386098879384475e-11 epoch:5000 cost:5.622008702808568e-11 epoch:5100 cost:3.768973201483945e-11 epoch:5200 cost:2.5267052544428612e-11 epoch:5300 cost:1.6938935640826224e-11 epoch:5400 cost:1.1355797752646709e-11 epoch:5500 cost:7.612883580409441e-12 epoch:5600 cost:5.10364811256023e-12 epoch:5700 cost:3.4214661858823592e-12 epoch:5800 cost:2.2937379222207037e-12 epoch:5900 cost:1.5377131373178318e-12 epoch:6000 cost:1.0308770055763616e-12 epoch:6100 cost:6.910960237303973e-13 epoch:6200 cost:4.633081328480944e-13 epoch:6300 cost:3.1060002587278896e-13 epoch:6400 cost:2.0822504972625157e-13 epoch:6500 cost:1.3959329000803675e-13 epoch:6600 cost:9.358279812287848e-14 epoch:6700 cost:6.27375524549844e-14 epoch:6800 cost:4.2059022453348655e-14 epoch:6900 cost:2.819620738445918e-14 epoch:7000 cost:1.8902631680374595e-14 epoch:7100 cost:1.2672251963706046e-14 epoch:7200 cost:8.495428242692191e-15 epoch:7300 cost:5.6953005418323606e-15 epoch:7400 cost:3.818109210872298e-15 epoch:7500 cost:2.559646703843325e-15 epoch:7600 cost:1.715977167705369e-15 epoch:7700 cost:1.1503841308296218e-15 epoch:7800 cost:7.712134590889591e-16 epoch:7900 cost:5.170181796345091e-16 epoch:8000 cost:3.4660712320096883e-16 epoch:8100 cost:2.3236376010761937e-16 epoch:8200 cost:1.5577646652938533e-16 epoch:8300 cost:1.0443157097223292e-16 epoch:8400 cost:7.001072645693813e-17 epoch:8500 cost:4.693481337728243e-17 epoch:8600 cost:3.1464976522195286e-17 epoch:8700 cost:2.1093897621304918e-17 epoch:8800 cost:1.414131913871262e-17 epoch:8900 cost:9.480173223312753e-18 epoch:9000 cost:6.3555460777137466e-18 epoch:9100 cost:4.2607216979344135e-18 epoch:9200 cost:2.856379507820286e-18 epoch:9300 cost:1.9149069138222803e-18 epoch:9400 cost:1.2837546267930686e-18 epoch:9500 cost:8.606012942395842e-19 epoch:9600 cost:5.769512172110539e-19 epoch:9700 cost:3.8679374024965736e-19 epoch:9800 cost:2.5930748809555126e-19 epoch:9900 cost:1.738357684304536e-19 . predict(2), predict(9) . (8.999999990291432, 22.999999991742527) . w, b . (1.0241087449458965, 9.115788218748797) . plt.plot(total_cost) plt.show() .",
            "url": "https://aniketmaurya.github.io/blog/machine%20learning/2020/03/27/Linear-Regression-Scratch.html",
            "relUrl": "/machine%20learning/2020/03/27/Linear-Regression-Scratch.html",
            "date": " • Mar 27, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://aniketmaurya.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://aniketmaurya.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://aniketmaurya.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://aniketmaurya.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}